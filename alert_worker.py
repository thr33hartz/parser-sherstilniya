#!/usr/bin/env python3
"""
alert_worker.py
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç bundle-–∞–ª–µ—Ä—Ç—ã –≤ Telegram –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã address_alerts.

–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ –∫–∞–∂–¥–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É:
  1. –ë–µ—Ä—ë–º –≤—Å–µ –≤—ã–≤–æ–¥—ã (flow='out') –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ time_gap_min –º–∏–Ω—É—Ç
     –∏–∑ tracked_transactions –ø–æ –∞–¥—Ä–µ—Å—É address_to_track.
  2. –û—Å—Ç–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
        min_transfer_amount  ‚â§ amount ‚â§  max_transfer_amount (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω).
  3. –ï—Å–ª–∏ –∫–æ–ª-–≤–æ ‚â• min_cnt –∏ (max(amount)-min(amount)) ‚â§ amount_step ‚Äì —à–ª—ë–º –∞–ª–µ—Ä—Ç.
"""

import asyncio, logging, os
from datetime import datetime, timedelta, timezone

import numpy as np
import pandas as pd
from dotenv import load_dotenv
from supabase import create_client
from telegram import Bot, constants

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ env / init ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

SUPABASE_URL  = os.getenv("SUPABASE_URL")
SUPABASE_KEY  = os.getenv("SUPABASE_KEY")
BOT_TOKEN     = os.getenv("TELEGRAM_BOT_TOKEN")
POLL_SEC      = int(os.getenv("ALERT_POLL_SEC", 30))

sb  = create_client(SUPABASE_URL, SUPABASE_KEY)
bot = Bot(BOT_TOKEN)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    datefmt="%H:%M:%S",
)

LAMPORT = 1_000_000_000  # 1 SOL

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fetch_active_alerts():
    """–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞"""
    res = (
        sb.table("address_alerts")
          .select("*")
          .filter("is_active", "eq", True)
          .execute()
    ).data or []
    return res


def fetch_transactions(addr: str, since: datetime) -> pd.DataFrame:
    """–í—ã–±–æ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –∏–∑ tracked_transactions –¥–ª—è –∞–¥—Ä–µ—Å–∞ –ø–æ—Å–ª–µ since"""
    since_iso = since.replace(tzinfo=timezone.utc).isoformat()
    res = (
        sb.table("tracked_transactions")
          .select("*")
          .filter("tracked_address", "eq", addr)
          .filter("flow", "eq", "out")
          .filter("block_time", "gte", since_iso)
          .execute()
    ).data or []
    return pd.DataFrame(res)


async def send_alert(task: dict, df: pd.DataFrame):
    """–§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    addr  = task["address_to_track"]
    cnt   = len(df)

    min_amt  = df["amount"].min() / LAMPORT
    max_amt  = df["amount"].max() / LAMPORT
    avg_amt  = df["amount"].mean() / LAMPORT
    diff_amt = max_amt - min_amt

    tos = ", ".join(sorted(set(df["to"]))[:10])  # –Ω–µ –±–æ–ª—å—à–µ 10 –∞–¥—Ä–µ—Å–æ–≤

    msg = (
        "üö® *BUNDLE ALERT!* üö®\n\n"
        f"*–ö–æ—à–µ–ª—ë–∫*: `{addr}`\n"
        f"*–í—ã–≤–æ–¥–æ–≤*: *{cnt}*  –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ *{task['time_gap_min']} –º–∏–Ω*\n"
        f"*–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞*: `~{avg_amt:.4f} SOL`\n"
        f"*Œî* (max-min): `{diff_amt:.4f} SOL`\n\n"
        "*–ü–æ–ª—É—á–∞—Ç–µ–ª–∏*:\n"
        f"`{tos}`\n\n"
        f"_–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ c_ `{addr}`"
    )

    await bot.send_message(
        chat_id=task["chat_id"],
        text=msg,
        parse_mode=constants.ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )
    logging.info("Alert sent to chat %s for %s", task["chat_id"], addr)


def need_alert(task: dict, df: pd.DataFrame) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞"""
    if df.empty:
        return False
    if len(df) < task["min_cnt"]:
        return False

    # –¥–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º (–ª–∞–º–ø–æ—Ä—Ç—ã)
    if "min_transfer_amount" in task and task["min_transfer_amount"] is not None:
        df = df[df["amount"] >= int(float(task["min_transfer_amount"]) * LAMPORT)]
    if "max_transfer_amount" in task and task["max_transfer_amount"] is not None:
        df = df[df["amount"] <= int(float(task["max_transfer_amount"]) * LAMPORT)]
    if len(df) < task["min_cnt"]:
        return False

    diff = (df["amount"].max() - df["amount"].min()) / LAMPORT
    return diff <= float(task["amount_step"])


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main loop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_task(task: dict):
    ago   = datetime.now(timezone.utc) - timedelta(minutes=task["time_gap_min"])
    df    = fetch_transactions(task["address_to_track"], ago)

    if need_alert(task, df):
        await send_alert(task, df)


async def main_loop():
    while True:
        tasks = fetch_active_alerts()
        if not tasks:
            logging.info("No active alert rules")
        else:
            await asyncio.gather(*(handle_task(t) for t in tasks))
        await asyncio.sleep(POLL_SEC)


if __name__ == "__main__":
    try:
        asyncio.run(main_loop())
    except KeyboardInterrupt:
        logging.info("Stopped by user")
