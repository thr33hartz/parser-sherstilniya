# handlers/conv_activate.py
from telegram.ext import ConversationHandler, MessageHandler, filters, CommandHandler
from services import db_access
from services.db_access import _sb      # ‚Üê –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
from services import db_access  

ASK_CODE = 1

async def cmd_activate(update, context):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ-–∫–æ–¥:")
    return ASK_CODE

async def process_code(update, context):
    code = update.message.text.strip()
    row  = db_access.check_code(code)
    if not row:
        await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif row["used"]:
        await update.message.reply_text("üòï –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
    else:
        tg_id = update.effective_user.id
        db_access.mark_code_used(code, tg_id)
        # 1) –ø–∏—à–µ–º –≤ –ë–î
        _sb.table("users").upsert(
            {"id": tg_id, "is_premium": True},
            on_conflict="id"
        ).execute()

        # 2) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data ‚Äî /start –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å –æ—Ç—Å—é–¥–∞
        context.user_data["premium"] = True

        # 3) —Å–ø–∞—Å–∏–±–æ‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /start.",
            disable_web_page_preview=True
        )
    return ConversationHandler.END

conv_activate = ConversationHandler(
    entry_points=[CommandHandler("activate", cmd_activate)],
    states={ASK_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_code)]},
    fallbacks=[],
)