import asyncio
import os
import io
import csv
import pandas as pd
import tempfile
from datetime import datetime

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaDocument
from telegram.ext import ContextTypes
from services import supabase_service, discord_scraper, queue_service
from tasks.celery_tasks import run_swaps_fetch_task, run_pnl_fetch_task, run_traders_fetch_task

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã ---

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app_context import driver, driver_lock

# UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from ui.translations import get_text
from ui.keyboards import get_main_menu_inline_keyboard
from ui.keyboards import get_template_settings_keyboard, get_template_view_keyboard
from ui.translations import get_text
from ui.keyboards import get_template_view_keyboard, get_pnl_filter_main_menu_keyboard # <-- ADD IT HERE
from ui.translations import get_text
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from config import MAX_ADDRESS_LIST_SIZE, FILES_DIR

# --- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã (–≤ –±—É–¥—É—â–µ–º –ø–µ—Ä–µ–µ–¥—É—Ç –≤ services) ---

# TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ services/discord_scraper.py –∏–ª–∏ task_orchestrator.py
from workers.get_trader_pnl import perform_pnl_fetch
from workers.get_program_swaps import perform_program_swaps
# from workers.get_top_traders import perform_toplevel_traders_fetch # –ò–º–ø–æ—Ä—Ç –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

# TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ services/supabase_service.py
from supabase_client import supabase

#
# =================================================================================
#  –†–∞–∑–¥–µ–ª 1: –§—É–Ω–∫—Ü–∏–∏-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
# =================================================================================
#

async def fetch_pnl_via_discord(wallets: list[str]) -> str | None:
    """(–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä) –í—ã–∑—ã–≤–∞–µ—Ç Selenium –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PNL."""
    async with driver_lock:
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            None, lambda: perform_pnl_fetch(driver, wallets)
        )

# TODO: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ services/
async def process_wallet_stats(addresses: list[str], update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PNL, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    lang = context.user_data.get('lang', 'en')
    main_msg_id = context.user_data.get("main_message_id")
    chat_id = update.effective_chat.id

    address_chunks = [addresses[i:i + MAX_ADDRESS_LIST_SIZE] for i in range(0, len(addresses), MAX_ADDRESS_LIST_SIZE)]
    num_chunks = len(address_chunks)
    all_csv_paths = []
    final_csv_path = None

    try:
        if num_chunks > 1:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=f"‚è≥ –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑ {len(addresses)} –∫–æ—à–µ–ª—å–∫–æ–≤ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ {num_chunks} –∑–∞—Ö–æ–¥–∞...")
        else:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "pnl_fetch_started"))

        for i, chunk in enumerate(address_chunks, 1):
            if num_chunks > 1:
                await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=f"‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–∫–µ—Ç {i} –∏–∑ {num_chunks}...")

            csv_path = await fetch_pnl_via_discord(chunk)
            if csv_path and os.path.exists(csv_path):
                all_csv_paths.append(csv_path)
            else:
                # logger.error(...)
                pass

        if not all_csv_paths:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ—Ç Discord-–±–æ—Ç–∞.")

        if len(all_csv_paths) > 1:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=f"üñáÔ∏è –û–±—ä–µ–¥–∏–Ω—è—é {len(all_csv_paths)} –æ—Ç—á–µ—Ç–æ–≤...")
            df_list = [pd.read_csv(path) for path in all_csv_paths]
            merged_df = pd.concat(df_list, ignore_index=True)
            
            merged_filename = f"pnl_merged_{uuid.uuid4()}.csv"
            final_csv_path = os.path.join(FILES_DIR, merged_filename)
            merged_df.to_csv(final_csv_path, index=False)
        else:
            final_csv_path = all_csv_paths[0]

        caption = get_text(lang, "pnl_report_caption", len(addresses))
        with open(final_csv_path, "rb") as f:
            await context.bot.edit_message_media(
                chat_id=chat_id, message_id=main_msg_id,
                media=InputMediaDocument(media=f, caption=caption),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text(lang, "back_btn"), callback_data="main_menu")]])
            )
    except Exception as e:
        # logger.error(...)
        await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "error_occurred"))
    finally:
        for path in all_csv_paths:
            if os.path.exists(path): os.remove(path)
        if final_csv_path and final_csv_path not in all_csv_paths and os.path.exists(final_csv_path):
             os.remove(final_csv_path)

# TODO: –ò –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ `handle_dev_stats_request`, `search_by_wallet_address`...
# –Ø –∏—Ö –ø—Ä–æ–ø—É—â—É –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ –∏—Ö –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—é–¥–∞.


#
# =================================================================================
#  –†–∞–∑–¥–µ–ª 2: –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# =================================================================================
#

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (state).
    """
    lang = context.user_data.get('lang', 'en')
    state = context.user_data.get('state')

    if not state:
        return

    main_msg_id = context.user_data.get('main_message_id')
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    try:
        await update.message.delete()
    except Exception:
        pass

    # --- –î–∏–∞–ª–æ–≥ –¥–ª—è Bundle Tracker ---
    if state == 'awaiting_bundle_address':
        if not (32 <= len(text) <= 44):
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "bundle_add_fail_invalid_address"))
            return
        context.user_data['bundle_tracker_data'] = {'address_to_track': text}
        context.user_data['state'] = 'awaiting_bundle_minutes'
        await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "bundle_add_step2_minutes"), parse_mode='Markdown')
        
    if state == 'awaiting_pnl_filter_value':
        column_to_set = context.user_data.get('pnl_filter_to_set')
        if not column_to_set:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            return

        template_data = context.user_data.get('template_data', {})
        # --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
        # –ï—Å–ª–∏ pnl_filters –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω None, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
        pnl_filters = template_data.get('pnl_filters')
        if pnl_filters is None:
            pnl_filters = {}
        # ---------------------------

        # –õ–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
        if text == '0':
            pnl_filters.pop(column_to_set, None) # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=f"–§–∏–ª—å—Ç—Ä –¥–ª—è `{column_to_set}` —Å–±—Ä–æ—à–µ–Ω.")
        else:
            try:
                parts = text.split()
                if len(parts) == 1:
                    min_val, max_val = float(parts[0]), None
                elif len(parts) == 2:
                    min_val, max_val = float(parts[0]), float(parts[1])
                    if min_val > max_val: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                         await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text="–û—à–∏–±–∫–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.")
                         return
                else:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
                
                pnl_filters[column_to_set] = {"min": min_val, "max": max_val}
                await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=f"‚úÖ –§–∏–ª—å—Ç—Ä –¥–ª—è `{column_to_set}` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            
            except ValueError:
                await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text="–û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ —á–∏—Å–ª–∞.")
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
        template_data['pnl_filters'] = pnl_filters
        context.user_data['template_data'] = template_data
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥-—Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data.pop('pnl_filter_to_set', None)
        context.user_data['state'] = 'awaiting_template_settings'
        
        await asyncio.sleep(2) # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é PNL-—Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
        text_to_show = "üìä **PNL-—Ñ–∏–ª—å—Ç—Ä—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.\n\n**–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:**\n"
        if not pnl_filters:
            text_to_show += "_–ü—É—Å—Ç–æ_"
        else:
            for col, val in pnl_filters.items():
                min_v = val.get('min', '-‚àû')
                max_v = val.get('max', '+‚àû')
                text_to_show += f"- `{col}`: –æ—Ç `{min_v}` –¥–æ `{max_v}`\n"
        
        reply_markup = get_pnl_filter_main_menu_keyboard(template_data)
        await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=text_to_show, parse_mode="Markdown", reply_markup=reply_markup)
        
        return
    
    elif state == 'awaiting_bundle_minutes':
        try:
            minutes = int(text)
            if minutes < 1: raise ValueError("Value too small")
            context.user_data['bundle_tracker_data']['time_gap_min'] = minutes
            context.user_data['state'] = 'awaiting_bundle_count'
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "bundle_add_step3_count"), parse_mode='Markdown')
        except ValueError:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "bundle_add_fail_invalid_number", "(min: 1)"))

    elif state == 'awaiting_bundle_count':
        try:
            count = int(text)
            if count < 1: raise ValueError("Value too small")
            context.user_data['bundle_tracker_data']['min_cnt'] = count
            context.user_data['state'] = 'awaiting_bundle_diff'
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "bundle_add_step4_diff"), parse_mode='Markdown')
        except ValueError:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "bundle_add_fail_invalid_number"))

    elif state == 'awaiting_bundle_diff':
        try:
            diff = float(text.replace(',', '.'))
            if diff <= 0: raise ValueError("Value must be positive")
            context.user_data['bundle_tracker_data']['amount_step'] = diff
            context.user_data['state'] = 'awaiting_bundle_min_amount'
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "bundle_add_step5_min_amount"), parse_mode='Markdown')
        except ValueError:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "bundle_add_fail_invalid_number"))

    elif state == 'awaiting_bundle_min_amount':
        try:
            min_amount = float(text.replace(',', '.'))
            if min_amount < 0: raise ValueError("Value must be non-negative")
            context.user_data['bundle_tracker_data']['min_transfer_amount'] = min_amount
            context.user_data['state'] = 'awaiting_bundle_max_amount'
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "bundle_add_step6_max_amount"), parse_mode='Markdown')
        except ValueError:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "bundle_add_fail_invalid_number"))

    elif state == 'awaiting_bundle_max_amount':
        try:
            max_amount = float(text.replace(',', '.'))
            if max_amount < 0: raise ValueError("Value must be non-negative")
            
            ud = context.user_data['bundle_tracker_data']
            ud['max_transfer_amount'] = max_amount if max_amount > 0 else None
            
            final_data = {
                "user_id": update.effective_user.id,
                "chat_id": chat_id,
                "is_active": True,
                **ud
            }
            
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–ï–†–í–ò–° –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            await supabase_service.upsert_bundle_alert(final_data)
            
            max_amount_text = str(ud['max_transfer_amount']) if ud['max_transfer_amount'] is not None else "‚àû"
            success_key = "bundle_edit_success" if context.user_data.get("editing_existing") else "bundle_add_success"
            await context.bot.edit_message_text(
                chat_id=chat_id, message_id=main_msg_id,
                text=get_text(lang, success_key, ud['address_to_track'], ud['time_gap_min'], ud['min_cnt'], ud['amount_step'], ud['min_transfer_amount'], max_amount_text),
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text(lang, "back_btn"), callback_data="bundle_back_to_main")]])
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop("editing_existing", None)
            context.user_data.pop('state', None)
            context.user_data.pop('bundle_tracker_data', None)
        except (ValueError, Exception) as e:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "error_occurred"))
            print(f"ERROR saving bundle: {e}")

    # --- –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ ---
    elif state == 'awaiting_template_name':
        template_name = text
        if not template_name:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú—ã –Ω–µ —Å–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å—Ä–∞–∑—É.
        # –ú—ã —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –∫–ª—é—á 'template_data' –∏ –¥–ª—è –Ω–æ–≤—ã—Ö, –∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        context.user_data['template_data'] = {
            "template_name": template_name,
            "platforms": [],
            "categories": ["completed", "completing"], # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "time_period": "24h"
        }
        context.user_data['state'] = 'awaiting_template_settings'
        
        reply_markup = get_template_settings_keyboard(lang, context.user_data['template_data'])
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=main_msg_id,
            text=f"–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω '{template_name}':",
            reply_markup=reply_markup
        )

    # --- –î–∏–∞–ª–æ–≥ –¥–ª—è Program Parse ---
    elif state == 'awaiting_program_parse_program':
        context.user_data['program_parse_program'] = text
        context.user_data['state'] = 'awaiting_program_parse_interval'
        await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "program_parse_prompt_interval"))

    elif state == 'awaiting_program_parse_interval':
        if text.lower() not in ("3h", "6h", "12h", "24h"):
            await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "program_parse_interval_invalid"))
            return

        program = context.user_data.pop('program_parse_program')
        context.user_data.pop('state', None)
        # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–ª–∏–Ω—É –æ—á–µ—Ä–µ–¥–∏
        current_queue_len = queue_service.get_queue_length()

        # 2. –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π
        user_position = current_queue_len + 1

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        queue_text = f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –í—ã {user_position}-–π –≤ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."

        # 4. –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        run_swaps_fetch_task.delay(program=program, interval=text, chat_id=chat_id)

        # 5. –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –µ–≥–æ –º–µ—Å—Ç–∞
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=main_msg_id,
            text=queue_text
        )


    # --- –°–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç —Ñ–∞–π–ª, –∞ –Ω–µ —Ç–µ–∫—Å—Ç ---
    elif state in ['awaiting_trader_list', 'awaiting_wallet_stats', 'awaiting_dev_address']:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=main_msg_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –≤ –≤–∏–¥–µ .txt —Ñ–∞–π–ª–∞, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–º."
        )


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ .txt —Ñ–∞–π–ª—ã –¥–ª—è "—Ç—è–∂–µ–ª—ã—Ö" –∑–∞–¥–∞—á.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ –≤—ã–∑–æ–≤—ã get_text —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç .format().
    """
    lang = context.user_data.get('lang', 'en')
    state = context.user_data.get('state')
    
    if state not in ['awaiting_trader_list', 'awaiting_wallet_stats']:
        return

    await update.message.delete()

    doc = update.message.document
    if not doc.file_name.lower().endswith('.txt'):
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get("main_message_id"),
            text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ .txt"
        )
        return

    main_msg_id = context.user_data.get("main_message_id")
    chat_id = update.effective_chat.id
    
    tg_file = await doc.get_file()
    file_content_bytes = await tg_file.download_as_bytearray()
    file_content_str = file_content_bytes.decode('utf-8')
    addresses = [line.strip() for line in file_content_str.splitlines() if line.strip()]

    # --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
    if not addresses:
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú .format()
        await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=get_text(lang, "input_empty_error"))
        return
        
    invalid_lines = [addr for addr in addresses if not (32 <= len(addr) <= 44)]
    if invalid_lines:
        error_sample = "\n".join(f"`{line}`" for line in invalid_lines[:5])
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú .format()
        error_text = get_text(lang, "input_address_length_error").format(error_sample)
        await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=error_text, parse_mode='Markdown')
        return

    # --- –õ–æ–≥–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ---
    current_queue_len = queue_service.get_queue_length()
    user_position = current_queue_len + 1
    queue_text = f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –í—ã {user_position}-–π –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
    
    # --- –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ ---
    if state == 'awaiting_trader_list':
        run_traders_fetch_task.delay(file_content_str=file_content_str, chat_id=chat_id)
    elif state == 'awaiting_wallet_stats':
        run_pnl_fetch_task.delay(wallets=addresses, chat_id=chat_id)
    
    context.user_data.pop('state', None)
    await context.bot.edit_message_text(chat_id=chat_id, message_id=main_msg_id, text=queue_text)
    