from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from .translations import get_text
from config import TIME_PERIODS, TOKEN_CATEGORIES
from telegram.ext import ContextTypes

PNL_FILTER_CATEGORIES = {
    "üí∞ Balance": ["balance", "wsol_balance"],
    "üìà ROI": ["roi_7d", "roi_30d"],
    "üéØ Winrate": ["winrate_7d", "winrate_30d"],
    "üíµ USD Profit": ["usd_profit_7d", "usd_profit_30d", "unrealised_pnl_7d"],
    "‚è±Ô∏è Holding Time": ["avg_holding_time"],
    "üìä Buys/Sells": [
        "total_buys_7d", "total_sells_7d", "total_buys_30d", "total_sells_30d",
        "pf_buys_7d", "pf_swap_buys_7d", "bonk_buys_7d", "raydium_buys_7d", "boop_buys_7d", "meteora_buys_7d",
        "pf_swap_buys_30d", "bonk_buys_30d", "raydium_buys_30d", "boop_buys_30d", "meteora_buys_30d",
        "avg_buys_per_token_7d", "avg_buys_per_token_30d"
    ],
    "üìÖ Trade Activity": ["last_trade_time", "traded_tokens"],
    "üïí Token Age": ["avg_token_age_7d", "avg_token_age_30d"],
    "üèÜ Top PNL": ["top_three_pnl"],
    "üìâ Quick Trades": ["avg_quick_buy_and_sell_percentage"],
    "üì¶ Bundled Buys": ["avg_bundled_token_buys_percentage"],
    "üìà Sold vs Bought": ["avg_sold_more_than_bought_percentage"],
    "üíπ Market Cap": ["avg_first_buy_mcap_7d", "avg_first_buy_mcap_30d"],
    "üí∏ Token Costs": ["avg_token_cost_7d", "avg_token_cost_30d", "total_cost_7d", "total_cost_30d"],
    "üí∏ Forwarder Tips": ["avg_forwarder_tip"]
}

DEV_PNL_FILTER_CATEGORIES = {
    "üöÄ Launch Stats": ["total_launched", "migrated_count", "migration_percentage"],
    "üíµ USD Profit": ["pnl_1d_usd", "pnl_7d_usd", "pnl_30d_usd"],
    "üéØ Winrate": ["winrate"]
}

def btn(text: str, cb_data: str | None = None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç InlineKeyboardButton.
    –ï—Å–ª–∏ callback_data –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –±–µ—Ä—ë–º text –≤ lower-case –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.
    """
    if cb_data is None:
        cb_data = text.lower().replace(" ", "_")
    return InlineKeyboardButton(text, callback_data=cb_data)

def get_dev_pnl_filter_main_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –º–µ–Ω—é PNL-—Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    """
    keyboard = []
    for category_name in DEV_PNL_FILTER_CATEGORIES.keys():
        keyboard.append(
            [InlineKeyboardButton(category_name, callback_data=f"dev_pnl_filter_cat_{category_name}")]
        )
    
    keyboard.append([InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="dev_pnl_filter_reset_all")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="dev_pnl_filter_back_to_settings")])
    
    return InlineKeyboardMarkup(keyboard)

def get_dev_pnl_filter_submenu_keyboard(category_name: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏.
    """
    keyboard = []
    columns = DEV_PNL_FILTER_CATEGORIES.get(category_name, [])
    
    for column_name in columns:
        keyboard.append([
            InlineKeyboardButton(column_name, callback_data=f"dev_pnl_filter_col_{column_name}")
        ])
        
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="dev_pnl_filter_back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)


def get_pnl_filter_main_menu_keyboard(template_data: dict) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –º–µ–Ω—é PNL-—Ñ–∏–ª—å—Ç—Ä–æ–≤ (–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏).
    –ö–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –ø–æ 2 –≤ —Ä—è–¥.
    """
    keyboard = []
    category_names = list(PNL_FILTER_CATEGORIES.keys())

    for i in range(0, len(category_names), 2):
        row = []
        for j in range(2):
            if i + j < len(category_names):
                name = category_names[i + j]
                row.append(InlineKeyboardButton(name, callback_data=f"pnl_filter_cat_{name}"))
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("üóëÔ∏è Reset all PNL filters", callback_data="pnl_filter_reset_all")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Back to edit", callback_data="pnl_filter_back_to_template")])

    return InlineKeyboardMarkup(keyboard)


def get_pnl_filter_submenu_keyboard(category_name: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è (–≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏).
    """
    keyboard = []
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    columns = PNL_FILTER_CATEGORIES.get(category_name, [])
    
    for column_name in columns:
        keyboard.append([
            InlineKeyboardButton(column_name, callback_data=f"pnl_filter_col_{column_name}")
        ])
        
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å PNL-—Ñ–∏–ª—å—Ç—Ä–æ–≤
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Back to categories", callback_data="pnl_filter_back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

def get_bundle_tracker_keyboard(lang: str) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(get_text(lang, "bundle_add_btn"), callback_data="bundle_add")],
        [InlineKeyboardButton(get_text(lang, "bundle_view_btn"), callback_data="bundle_view")],
        [InlineKeyboardButton(get_text(lang, "back_btn"), callback_data="bundle_back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_token_parse_settings_keyboard(lang: str, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
    ud = context.user_data
    
    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Platforms" ---
    selected_platforms_count = len(ud.get('token_parse_platforms', []))
    platforms_text_template = get_text(lang, "platforms_btn") # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω "Platforms ({})"
    # Update Platforms text icon
    platforms_text = f"üß© Platforms ({selected_platforms_count})"

    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Category" ---
    selected_categories = ud.get('token_parse_categories', [])
    # Update Category text icon
    category_text = f"üóÇÔ∏è Category ({len(selected_categories)})"

    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Time Period" ---
    selected_period = ud.get('token_parse_period', '24h')
    period_text_template = get_text(lang, "time_period_btn") # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω "Time Period ({})"
    period_text = period_text_template.format(selected_period)

    # --- –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---
    keyboard = [
        [InlineKeyboardButton(platforms_text, callback_data="tokensettings_platforms")],
        [InlineKeyboardButton(category_text, callback_data="tokensettings_category")],
        [InlineKeyboardButton(period_text, callback_data="tokensettings_period")],
        [InlineKeyboardButton(get_text(lang, "parse_now_btn"), callback_data="tokensettings_execute")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="parse_back")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_parse_submenu_keyboard(lang: str) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üß® All-in parse", callback_data="parse_all_in")],
        [InlineKeyboardButton("üí† Get tokens", callback_data="parse_get_tokens")],
        [InlineKeyboardButton("üèÜ Get top traders", callback_data="parse_get_traders")],
        [InlineKeyboardButton("üìà Get Wallet Stats", callback_data="parse_get_stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_main_menu_inline_keyboard(lang: str) -> InlineKeyboardMarkup:
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã."""
    keyboard = [
        [InlineKeyboardButton(get_text(lang, "parse_btn"),         callback_data="mainmenu_parse"),
         InlineKeyboardButton(get_text(lang, "dev_parse_btn"),     callback_data="mainmenu_dev_parse")],
        [InlineKeyboardButton(get_text(lang, "program_parse_btn"), callback_data="mainmenu_program_parse"),
         InlineKeyboardButton(get_text(lang, "bundle_tracker_btn"),callback_data="mainmenu_bundle_tracker")],
        [InlineKeyboardButton(get_text(lang, "copytrade_sim_btn"), callback_data="mainmenu_copytrade_sim"),
         InlineKeyboardButton(get_text(lang, "settings_btn"),      callback_data="mainmenu_settings")],

    ]
    return InlineKeyboardMarkup(keyboard)
    
def get_language_keyboard() -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
            InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")
        ]
    ])

def get_platform_selection_keyboard(lang: str, all_platforms: list, selected_platforms: list) -> InlineKeyboardMarkup:
    keyboard = []
    row = []
    for platform in all_platforms:
        if platform in selected_platforms:
            text = f"‚úÖ {platform}"
        else:
            text = f"‚ùå {platform}"
        row.append(InlineKeyboardButton(text, callback_data=f"platform_toggle_{platform}"))
        if len(row) == 2: 
            keyboard.append(row)
            row = []
    if row: 
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(get_text(lang, "back_btn"), callback_data="platform_done")])
    return InlineKeyboardMarkup(keyboard)

def get_period_selection_keyboard(lang: str, current_period: str) -> InlineKeyboardMarkup:
    keyboard = []
    for period_key, period_text_ru in TIME_PERIODS.items():
        text = f"‚úÖ {period_text_ru}" if period_key == current_period else period_text_ru
        keyboard.append([InlineKeyboardButton(text, callback_data=f"period_select_{period_key}")])
    keyboard.append([InlineKeyboardButton(get_text(lang, "back_btn"), callback_data="period_done")])
    return InlineKeyboardMarkup(keyboard)

def get_category_selection_keyboard(lang: str, selected_categories: list, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
    """
    –ï–î–ò–ù–ê–Ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    keyboard = []
    
    current_state = context.user_data.get('state')
    
    # –ï—Å–ª–∏ –º—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Dev Parse –∏–ª–∏ –®–∞–±–ª–æ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–µ–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if current_state in ['dev_parse_editing_categories', 'template_editing_categories']:
        all_categories = ["completed", "completing"]
    else: # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
        all_categories = TOKEN_CATEGORIES 

    for category in all_categories:
        text = f"‚úÖ {category}" if category in selected_categories else f"‚ùå {category}"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"category_toggle_{category}")])
    
    keyboard.append([InlineKeyboardButton(get_text(lang, "back_btn"), callback_data="category_done")])
    return InlineKeyboardMarkup(keyboard)

def get_template_management_keyboard(lang: str, user_id: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("‚ûï Add Template", callback_data="template_create")],
        [InlineKeyboardButton("üìã My Templates", callback_data="template_view")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="parse_back")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_template_view_keyboard(lang: str, templates: list) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏."""
    keyboard = []
    for template in templates:
        template_id = template["id"]
        template_name = template["template_name"]
        keyboard.append([
            InlineKeyboardButton(
                f"{template_name}",
                callback_data=f"template_select_{template_id}"
            ),
            InlineKeyboardButton(
                "‚úèÔ∏è Edit",
                callback_data=f"template_edit_{template_id}"
            ),
            InlineKeyboardButton(
                "üóëÔ∏è Delete",
                callback_data=f"template_delete_{template_id}"
            ),
        ])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="template_back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_template_edit_keyboard(lang: str, template: dict) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞."""
    platforms_count = len(template.get("platforms", []))
    platforms_text = f"üß© Platforms ({platforms_count if platforms_count > 0 else 'All'})"
    categories = template.get("categories", [])
    category_text = f"üóÇÔ∏è Category ({len(categories)})"
    period = template.get("time_period", "24h")
    period_text = f"Time Period ({period})"
    keyboard = [
        [InlineKeyboardButton(platforms_text, callback_data=f"template_edit_platforms_{template['id']}")],
        [InlineKeyboardButton(category_text, callback_data=f"template_edit_category_{template['id']}")],
        [InlineKeyboardButton(period_text, callback_data=f"template_edit_period_{template['id']}")],
        [InlineKeyboardButton("üíæ Save", callback_data=f"template_save_{template['id']}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="template_view")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_template_settings_keyboard(lang: str, template_data: dict) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ get_text().
    """
    platforms_count = len(template_data.get('platforms', []))
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω, –ø–æ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    platforms_text_template = get_text(lang, "platforms_btn")
    platforms_text = platforms_text_template.format(platforms_count if platforms_count > 0 else 'All')
    
    categories = template_data.get('categories', [])
    category_text = f"üóÇÔ∏è Category ({len(categories)})"
    
    selected_period = template_data.get('time_period', '24h')
    period_text_template = get_text(lang, "time_period_btn")
    period_text = period_text_template.format(selected_period)

    keyboard = [
        [InlineKeyboardButton(platforms_text, callback_data="template_set_platforms")],
        [InlineKeyboardButton(category_text, callback_data="template_set_category")],
        [InlineKeyboardButton(period_text, callback_data="template_set_period")],
        [InlineKeyboardButton("üìä PNL Filters", callback_data="template_set_pnl_filters")],
        [InlineKeyboardButton("‚úÖ Save Template", callback_data="template_set_save")],
        [InlineKeyboardButton("‚ùå Cancel", callback_data="template_cancel")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_template_category_keyboard(lang: str, selected_categories: list) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —à–∞–±–ª–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ completed/completing).
    –ò–°–ü–†–ê–í–õ–ï–ù–û: callback_data —Ç–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'template_set_'.
    """
    keyboard = []
    for category in ["completed", "completing"]:
        text = f"‚úÖ {category}" if category in selected_categories else f"‚ùå {category}"
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨:
        keyboard.append([InlineKeyboardButton(text, callback_data=f"template_set_toggle_category_{category}")])
    
    # –ò –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨:
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="template_set_category_done")])
    return InlineKeyboardMarkup(keyboard)

def get_dev_parse_settings_keyboard(lang: str, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Dev Parse.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "PNL-—Ñ–∏–ª—å—Ç—Ä—ã".
    """
    ud = context.user_data
    platforms_text = get_text(lang, "platforms_btn").format(len(ud.get('dev_parse_platforms', [])))
    category_text = get_text(lang, "category_btn").format(len(ud.get('dev_parse_categories', [])))
    period_text = get_text(lang, "time_period_btn").format(ud.get('dev_parse_period', '72h'))

    keyboard = [
        [InlineKeyboardButton(platforms_text, callback_data="devparse_platforms")],
        [InlineKeyboardButton(category_text, callback_data="devparse_category")],
        [InlineKeyboardButton(period_text, callback_data="devparse_period")],
        # --- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê ---
        [InlineKeyboardButton("üìä PNL-filters", callback_data="devparse_pnl_filters")],
        [InlineKeyboardButton("‚úÖ Parse Devs", callback_data="devparse_execute")],
        [InlineKeyboardButton(get_text(lang, "back_btn"), callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_dev_parse_period_keyboard(lang: str, current_period: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è Dev Parse (—Ç–æ–ª—å–∫–æ 24, 48, 72—á)."""
    keyboard = []
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    periods = {'24h': '24h', '48h': '48h', '72h': '72h'}
    
    for period_key, period_text in periods.items():
        text = f"‚úÖ {period_text}" if period_key == current_period else period_text
        keyboard.append([InlineKeyboardButton(text, callback_data=f"devparse_period_select_{period_key}")])
        
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="devparse_period_done")])
    return InlineKeyboardMarkup(keyboard)

# ui/keyboards.py

def get_main_menu_inline_keyboard(lang: str, premium: bool = False) -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. callback_data ‚Üí –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å mainmenu_,
    –∫–∞–∫ –∏ –∂–¥—ë—Ç main_menu_callback_handler.
    """
    rows = [
        [
            InlineKeyboardButton("üîç Parse",          callback_data="mainmenu_parse"),
            InlineKeyboardButton("‚öôÔ∏è Program Parse",  callback_data="mainmenu_program_parse"),
        ]
    ]

    if premium:
        rows.append([
            InlineKeyboardButton("üìä Bundle Tracker", callback_data="mainmenu_bundle_tracker"),
            InlineKeyboardButton("üë®‚Äçüíª Dev Parse",      callback_data="mainmenu_dev_parse"),
        ])

    rows.append([
        InlineKeyboardButton("üîß Settings", callback_data="mainmenu_settings")
    ])

    return InlineKeyboardMarkup(rows)